#include "testUtils.h"
#include "..\dataset\inspector.h"
#include "..\dataset\xmlfilewrapper.h"
#include "..\dataset\detEvaluator.h"

int testSampleConfig(std::string fileName)
{
	DatasetConfig::writeOutSampleXml("output\\" + fileName);
	return 1;
}

int testInspector(std::string fileName)
{
	cout << "Test for inspector!\n";

	MOTInspector inspector;

	std::string baseDir = "D:\\tracking-dataset\\configs\\";	

	DatasetConfig dataset(baseDir + fileName);
	
	ImgSeqConfig conf;
	dataset2ImgSeq(dataset, conf);

	cv::Ptr<ImgSeqReader> reader = new ImgSeqReader(conf);
	inspector.setReader(reader);

	// ground truth
	cv::Ptr<FrameBasedGT> fbGT = new FrameBasedGT(dataset.m_fbGTUrl);
	XMLFileWrapper::load(*fbGT);
	
	inspector.setGT(fbGT);

	// detection
	if (dataset.m_detResUrls.size() > 0)
	{
		cv::Ptr<DetectionResult> dr = new DetectionResult(dataset.m_detResUrls[0]);	
		XMLFileWrapper::load(*dr);
		inspector.setDR(dr);
	}	

	inspector.autoPlay();

	return 1;
}

int testConvertedGT(std::string fileName)
{
	cout << "Test for GT conversion!\n";

	MOTInspector inspector;

	std::string baseDir = "D:\\tracking-dataset\\configs\\";	

	DatasetConfig dataset(baseDir + fileName);
	
	ImgSeqConfig conf;
	dataset2ImgSeq(dataset, conf);

	cv::Ptr<ImgSeqReader> reader = new ImgSeqReader(conf);
	inspector.setReader(reader);

	// ground truth
	cv::Ptr<TrackBasedGT> tbGT = new TrackBasedGT(dataset.m_tbGTUrl);
	XMLFileWrapper::load(*tbGT);
	cv::Ptr<FrameBasedGT> fbGT = new FrameBasedGT(dataset.m_fbGTUrl);
	XMLFileWrapper::convert(*tbGT, *fbGT);
	
	inspector.setGT(fbGT);	

	inspector.autoPlay();

	return 1;
}

int testDetEvalWithInspector(std::string fileName)
{
	cout << "Test for detection evaluator with inspector!\n";

	MOTInspector inspector;

	std::string baseDir = "D:\\tracking-dataset\\configs\\";	

	DatasetConfig dataset(baseDir + fileName);

	ImgSeqConfig conf;
	dataset2ImgSeq(dataset, conf);

	cv::Ptr<ImgSeqReader> reader = new ImgSeqReader(conf);
	inspector.setReader(reader);

	// ground truth
	cv::Ptr<FrameBasedGT> fbGT = new FrameBasedGT(dataset.m_fbGTUrl);
	XMLFileWrapper::load(*fbGT);

	inspector.setGT(fbGT);

	// detection
	/*if (dataset.m_detResUrls.size() > 0)
	{
		cv::Ptr<DetectionResult> dr = new DetectionResult(dataset.m_detResUrls[0]);	
		XMLFileWrapper::load(*dr);
		inspector.setDR(dr);
	}*/
	// if not set detection result, detections generated by DetectionEvaluator, default setting (0.8, 0.8, 0.1)
	inspector.showDetEval();

	inspector.autoPlay();

	return 1;
}

int testDetectinGeneration(std::string fileName)
{
	cout << "Test for detection generation (output)!\n";

	MOTInspector inspector;

	std::string baseDir = "D:\\tracking-dataset\\configs\\";	

	DatasetConfig dataset(baseDir + fileName);

	// ground truth
	cv::Ptr<FrameBasedGT> fbGT = new FrameBasedGT(dataset.m_fbGTUrl);
	XMLFileWrapper::load(*fbGT);

	DetectionEvaluator eval(fbGT, cv::Size(dataset.m_fWidth, dataset.m_fHeight));

	cv::Ptr<DetectionResult> dr;
	dr = new DetectionResult("test.xml");
	eval.generate(dr, 0.8f, 0.8f, 0.1f);
	//gen.generate(dr, 1.0f, 1.0f, 0.0f);
	
	DetEvalResult res = eval.evaluate(dr);
	std::cout << "Good dets: " << res.goodDets << " false alarms: " << res.falseAlarms <<
		" missing: " << res.missDets << std::endl;
	cout << "Precision: " << (double)res.goodDets / (res.goodDets + res.falseAlarms) <<
		"\tRecall: " << (double)res.goodDets / (res.goodDets + res.missDets) << endl;
	XMLFileWrapper::writeOut(*dr, "output//dets//bo-det-0808.xml", 1, dataset.m_sIdx, dataset.m_eIdx);
	XMLFileWrapper::writeOut(*dr, "output//dets//mi-det-0808.xml", 0, dataset.m_sIdx, dataset.m_eIdx);

	return 1;
}